{"version":3,"sources":["components/common/Input/Input.module.scss","components/Forecast/Forecast.module.scss","components/common/Preloader/Preloader.module.css","components/CurrentWeather/CurrentWeatherData/CurrentWeatherData.module.scss","components/Search/Search.module.scss","components/Footer/Footer.module.scss","components/Footer/SocialLinks/SocialLink/SocialLink.module.scss","assets/images/loader.svg","components/common/Button/Button.module.scss","components/Footer/SocialLinks/SocialLinks.module.scss","components/CurrentWeather/Location/Location.tsx","reducers/request-reducer.ts","api/api.ts","api/currentWeather-api.ts","reducers/currentWeather-reducer.ts","components/common/Preloader/Preloader.tsx","components/CurrentWeather/CurrentWeatherData/CurrentWeatherData.tsx","components/CurrentWeather/Weather.tsx","api/forecast-api.ts","reducers/forecast-reducer.ts","components/common/Button/Button.tsx","components/Forecast/ForecastDay/ForecastDay.tsx","components/Forecast/Forecast.tsx","components/common/Input/Input.tsx","api/search-api.ts","reducers/search-reducer.ts","components/Search/Search.tsx","hooks/useDebounce.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","reducers/store.ts","index.tsx","components/Forecast/ForecastDay/ForecastDay.module.scss"],"names":["module","exports","Location","props","className","styles","location","name","region","country","initialState","error","isFetching","errorAC","type","API_KEY","instance","axios","create","baseURL","currentWeatherApi","lat","lon","get","currentWeather","condition","getCurrentWeatherTC","dispatch","then","res","data","current","catch","response","React","memo","wrapper","src","preloader","img","alt","CurrentWeatherData","colLeft","colLeftInner","condition_img","width","currentWeatherImg","desc","largeText","temp_c","bigText","condition_text","colRight","currentWeatherItem","icon","faCalendarAlt","last_updated_weekday","last_updated_date","faTemperatureHigh","faWater","humidity","faWind","wind_kph","wind_dir","faBacon","gust_kph","Weather","useDispatch","requestIsFetching","useSelector","state","request","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","updateDate","Date","last_updated","toLocaleString","weekday","year","month","day","feelslike_c","text","forecastAPI","days","forecastday","getForecastTC","forecast","labelTitle","restProps","classes","btn","ForecastDay","wrap","weekDay","date","temp","min_temp","max_temp","details","faSun","sunrise","faMoon","sunset","Forecast","forecastInfo","useState","forecastDays","setForecastDays","currentWeekday","currentDate","btns","onClick","map","d","adaptedDate","key","astro","mintemp_c","maxtemp_c","label","input","errorMessage","searchAPI","place","Search","searchData","search","searchVal","setSearchVal","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","onInputChange","useCallback","e","currentTarget","onPlaceClick","onChange","placeholder","options","option","id","SocialLink","socialLink","link","href","target","rel","title","SocialLinks","socialLinks","Footer","footer","copyright","App","Boolean","window","hostname","match","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.742ad2b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__1Ryba\",\"error\":\"Input_error__3tqam\",\"errorMessage\":\"Input_errorMessage__2eBzi\",\"showPassword\":\"Input_showPassword__sw7W0\",\"input\":\"Input_input__3Ajls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"Forecast_days__3c9pS\",\"day\":\"Forecast_day__2Zige\",\"btns\":\"Forecast_btns__Yr0K7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__36syV\",\"img\":\"Preloader_img__2MpzG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentWeather\":\"CurrentWeatherData_currentWeather__1IvEW\",\"colLeft\":\"CurrentWeatherData_colLeft__KIElu\",\"colLeftInner\":\"CurrentWeatherData_colLeftInner__3cjZk\",\"colRight\":\"CurrentWeatherData_colRight__VTPkp\",\"currentWeatherImg\":\"CurrentWeatherData_currentWeatherImg__346TM\",\"largeText\":\"CurrentWeatherData_largeText__3wvtN\",\"bigText\":\"CurrentWeatherData_bigText__1yR8P\",\"currentWeatherItem\":\"CurrentWeatherData_currentWeatherItem__42IZd\",\"icon\":\"CurrentWeatherData_icon__2qdFQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"Search_option__2FNbj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__NKLTu\",\"copyright\":\"Footer_copyright__2Y56w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__2CHKB\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__AyrSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__1_ngm\"};","import React from \"react\"\r\nimport styles from './Location.module.scss'\r\n\r\nconst Location = (props: LocationPropsType) => {\r\n\r\n    return (\r\n        <div className={styles.location}>\r\n            <h2>{props.name}, {props.region}, {props.country}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n\r\n\r\ntype LocationPropsType = {\r\n    name: string\r\n    region: string\r\n    country: string\r\n}","let initialState = {\r\n   error: '',\r\n   isFetching: false,\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nexport const requestReducer = (state: InitialState = initialState, action: InitReducerActionsType) => {\r\n   switch (action.type) {\r\n      case 'REQUEST_ERROR':\r\n         return {...state, error: action.error}\r\n      case 'REQUEST_IS_FETCHING':\r\n         return {...state, isFetching: action.isFetching}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport const errorAC = (error: string) => ({type: 'REQUEST_ERROR', error} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'REQUEST_IS_FETCHING', isFetching} as const)\r\n\r\n\r\n// TYPES\r\nexport type ErrorACType = ReturnType<typeof errorAC>\r\nexport type isFetchingACType = ReturnType<typeof isFetchingAC>\r\ntype InitReducerActionsType = ErrorACType | isFetchingACType\r\n","import axios from \"axios\";\r\n\r\nexport const API_KEY = 'ad86b534a1a14d4891f171701201710'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://api.weatherapi.com/v1',\r\n})","import {API_KEY, instance} from \"./api\";\r\nimport {CurrentWeatherResponseType, LocationResponseType} from \"../types/common-types\";\r\n\r\nexport const currentWeatherApi = {\r\n    currentWeather(lat: number, lon: number) {\r\n        return instance.get<CurrectWeatherType>(`/current.json?key=${API_KEY}&q=${lat},${lon}`)\r\n    }\r\n}\r\n\r\nexport type CurrectWeatherType = {\r\n    location: LocationResponseType,\r\n    current: CurrentWeatherResponseType\r\n}","import {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {ConditionResponseType, CurrentWeatherResponseType, LocationResponseType} from \"../types/common-types\";\r\nimport {currentWeatherApi} from \"../api/currentWeather-api\";\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    lat: 0,\r\n    lon: 0,\r\n    location: {} as LocationResponseType,\r\n    currentWeather: {\r\n        condition: {} as ConditionResponseType\r\n    } as CurrentWeatherResponseType\r\n} as InitialStateType;\r\n\r\nexport const currentWeatherReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'COORDINATES':\r\n            return {...state, lat: action.lat, lon: action.lon}\r\n        case 'LOCATION':\r\n            return {...state, location: action.location}\r\n        case 'CURRENT_WEATHER':\r\n            return {...state, currentWeather: action.currentWeather}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const userCoordinatesAC = (lat: number, lon: number) => ({type: 'COORDINATES', lat, lon} as const)\r\nexport const userLocationAC = (location: LocationResponseType) => ({type: 'LOCATION', location} as const)\r\nexport const currentWeatherAC = (currentWeather: CurrentWeatherResponseType) => ({\r\n    type: 'CURRENT_WEATHER',\r\n    currentWeather\r\n} as const)\r\n\r\n\r\n// THUNK\r\nexport const getUserCoordinatesTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n        dispatch(userCoordinatesAC(position.coords.latitude, position.coords.longitude))\r\n    });\r\n}\r\n\r\nexport const getCurrentWeatherTC = (lat: number, lon: number) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    //dispatch(isFetchingAC(true))\r\n    currentWeatherApi.currentWeather(lat, lon)\r\n        .then(res => {\r\n            //dispatch(isFetchingAC(false))\r\n            dispatch(userLocationAC(res.data.location))\r\n            dispatch(currentWeatherAC(res.data.current))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.response.data.error))\r\n            //dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    lat: number\r\n    lon: number\r\n    location: LocationResponseType\r\n    currentWeather: CurrentWeatherResponseType\r\n}\r\n\r\nexport type ActionsType = userCoordinatesACType | userLocationACType | currentWeatherACType\r\n\r\nexport type userCoordinatesACType = ReturnType<typeof userCoordinatesAC>\r\nexport type userLocationACType = ReturnType<typeof userLocationAC>\r\nexport type currentWeatherACType = ReturnType<typeof currentWeatherAC>","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = () => {\r\n   return (\r\n      <div className={styles.wrapper}>\r\n         <img src={preloader} className={styles.img} alt='loader'/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Preloader)\r\n","import React from \"react\"\r\nimport styles from './CurrentWeatherData.module.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBacon, faCalendarAlt, faTemperatureHigh, faWater, faWind} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CurrentWeatherData = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={styles.currentWeather}>\r\n            <div className={styles.colLeft}>\r\n                <div className={styles.colLeftInner}>\r\n                    <img src={props.condition_img} width='150' className={styles.currentWeatherImg}/>\r\n                    <div className={styles.desc}>\r\n                        <p className={styles.largeText}>{props.temp_c}&#176;C</p>\r\n                        <p className={styles.bigText}>{props.condition_text}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={styles.colRight}>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faCalendarAlt} className={styles.icon}/> <span>Today: </span>{props.last_updated_weekday} {props.last_updated_date}</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faTemperatureHigh} className={styles.icon}/><span>Feels Like: </span>{props.temp_c}&#176;C</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faWater} className={styles.icon}/><span>Humidity:</span> {props.humidity} %</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faWind} className={styles.icon}/><span>Wind:</span> {props.wind_kph} km/h ({props.wind_dir})</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faBacon} className={styles.icon}/><span>Gust: </span>{props.gust_kph}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentWeatherData\r\n\r\n\r\ntype PropsType = {\r\n    last_updated_weekday: string\r\n    last_updated_date: string\r\n    temp_c: number\r\n    feelslike_c: number\r\n    wind_kph: number\r\n    wind_dir: string\r\n    gust_kph: number\r\n    humidity: number\r\n    condition_text: string\r\n    condition_img: string\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport Location from \"./Location/Location\";\r\nimport {getCurrentWeatherTC, getUserCoordinatesTC} from \"../../reducers/currentWeather-reducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport CurrentWeatherData from \"./CurrentWeatherData/CurrentWeatherData\";\r\nimport {CurrentWeatherResponseType, LocationResponseType} from \"../../types/common-types\";\r\n\r\n\r\nconst Weather = () => {\r\n    const dispatch = useDispatch()\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const lat = useSelector<AppRootStateType, number>(state => state.currentWeather.lat)\r\n    const lon = useSelector<AppRootStateType, number>(state => state.currentWeather.lon)\r\n    const location = useSelector<AppRootStateType, LocationResponseType>(state => state.currentWeather.location)\r\n    const currentWeather = useSelector<AppRootStateType, CurrentWeatherResponseType>(state => state.currentWeather.currentWeather)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserCoordinatesTC())\r\n        if (lat !== 0 && lon !== 0) {\r\n            dispatch(getCurrentWeatherTC(lat, lon))\r\n        }\r\n    }, [lat, lon])\r\n\r\n    const updateDate = new Date(currentWeather.last_updated)\r\n    let currentWeekday = {weekday: 'long'}\r\n    let currentDate = {year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                {requestIsFetching && <Preloader/>}\r\n                {(!lat && !lon)\r\n                    ? 'You should allow see your location'\r\n                    : <>\r\n\r\n                        <Location name={location.name} region={location.region} country={location.country}/>\r\n                        <CurrentWeatherData last_updated_weekday={updateDate.toLocaleString('en-US', currentWeekday)}\r\n                                            last_updated_date={updateDate.toLocaleString('en-US', currentDate)}\r\n                                            temp_c={currentWeather.temp_c}\r\n                                            feelslike_c={currentWeather.feelslike_c}\r\n                                            wind_kph={currentWeather.wind_kph}\r\n                                            wind_dir={currentWeather.wind_dir}\r\n                                            gust_kph={currentWeather.gust_kph}\r\n                                            humidity={currentWeather.humidity}\r\n                                            condition_text={currentWeather.condition.text}\r\n                                            condition_img={currentWeather.condition.icon}\r\n                        />\r\n                    </>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import {API_KEY, instance} from \"./api\";\r\nimport {\r\n    AstroResponseType,\r\n    CurrentWeatherResponseType,\r\n    DayResponseType, HourResponseType,\r\n    LocationResponseType\r\n} from \"../types/common-types\";\r\n\r\nexport const forecastAPI = {\r\n    dailyWeather(days: number, lat: number, lon: number) {\r\n        return instance.get<ForecastType>(`/forecast.json?key=${API_KEY}&q=${lat},${lon}&days=${days}`)\r\n    }\r\n}\r\n\r\nexport type ForecastType = {\r\n    location: LocationResponseType,\r\n    current: CurrentWeatherResponseType\r\n    forecast: ForecastDayInfoType\r\n}\r\n\r\nexport type ForecastDayInfoType = {\r\n    forecastday: Array<ForecastdayResponseType>\r\n}\r\n\r\nexport type ForecastdayResponseType = {\r\n    date: string\r\n    day: DayResponseType\r\n    astro: AstroResponseType\r\n    hour: Array<HourResponseType>\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {forecastAPI, ForecastDayInfoType, ForecastdayResponseType} from \"../api/forecast-api\";\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    forecastday: [] as Array<ForecastdayResponseType>\r\n} as InitialStateType;\r\n\r\nexport const forecastReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'FORECAST_DATA':\r\n            return {...state, forecastday: action.forecastday}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const forecastDataAC = (forecastday: Array<ForecastdayResponseType>) => ({\r\n    type: 'FORECAST_DATA',\r\n    forecastday\r\n} as const)\r\n\r\n\r\n// THUNK\r\nexport const getForecastTC = (days: number, lat: number, lon: number) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    //dispatch(isFetchingAC(true))\r\n    forecastAPI.dailyWeather(days, lat, lon)\r\n        .then(res => {\r\n            //dispatch(isFetchingAC(false))\r\n            dispatch(forecastDataAC(res.data.forecast.forecastday))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.response.data.error))\r\n            //dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    forecastday: Array<ForecastdayResponseType>\r\n}\r\n\r\nexport type ActionsType = ForecastDataACType\r\n\r\nexport type ForecastDataACType = ReturnType<typeof forecastDataAC>","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { labelTitle?: string }\r\n\r\nconst Button = (props: InputPropsType) => {\r\n    const {labelTitle, ...restProps} = props\r\n    return (\r\n        <button className={classes.btn} {...restProps}> {props.labelTitle}</button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","import React from \"react\";\r\nimport styles from './ForecastDay.module.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faMoon, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ForecastDay = (props: PropsType) => {\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <h3>{props.weekDay}</h3>\r\n            <p className={styles.date}>{props.date}</p>\r\n            <img src={props.icon} className={styles.img}/>\r\n            <p>{props.condition_text}</p>\r\n            <p className={styles.temp}>{props.min_temp} - {props.max_temp}&#176;C</p>\r\n            <div className={styles.details}>\r\n                <p><FontAwesomeIcon icon={faSun} className={styles.icon}/> {props.sunrise}</p>\r\n                <p><FontAwesomeIcon icon={faMoon} className={styles.icon}/> {props.sunset}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForecastDay;\r\n\r\n\r\ntype PropsType = {\r\n    weekDay: string\r\n    date: string\r\n    sunrise: string\r\n    sunset: string\r\n    icon: string\r\n    condition_text: string\r\n    min_temp: number\r\n    max_temp: number\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {getForecastTC} from \"../../reducers/forecast-reducer\"\r\nimport {AppRootStateType} from \"../../reducers/store\"\r\nimport styles from './Forecast.module.scss'\r\nimport Button from \"../common/Button/Button\"\r\nimport ForecastDay from \"./ForecastDay/ForecastDay\"\r\nimport {ForecastdayResponseType} from \"../../api/forecast-api\"\r\n\r\n\r\nconst Forecast = () => {\r\n    const dispatch = useDispatch()\r\n    const lat = useSelector<AppRootStateType, number>(state => state.currentWeather.lat)\r\n    const lon = useSelector<AppRootStateType, number>(state => state.currentWeather.lon)\r\n    const forecastInfo = useSelector<AppRootStateType, ForecastdayResponseType[]>(state => state.forecast.forecastday)\r\n    const [forecastDays, setForecastDays] = useState(3)\r\n\r\n    useEffect(() => {\r\n        if (lat !== 0 && lon !== 0) {\r\n            dispatch(getForecastTC(forecastDays, lat, lon))\r\n        }\r\n    }, [lat, lon, forecastDays])\r\n\r\n\r\n    let currentWeekday = {weekday: 'long'}\r\n    let currentDate = {year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                <h2>Forecast</h2>\r\n                <div className={styles.btns}>\r\n                    <Button labelTitle='1 day' onClick={() => setForecastDays(1)}/>\r\n                    <Button labelTitle='2 days' onClick={() => setForecastDays(2)}/>\r\n                    <Button labelTitle='3 days' onClick={() => setForecastDays(3)}/>\r\n                </div>\r\n                <div className={styles.days}>\r\n                    {forecastInfo.map((d) => {\r\n                        const adaptedDate = new Date(d.date)\r\n                        return (\r\n                            <div className={styles.day} key={d.date}>\r\n                                <ForecastDay weekDay={adaptedDate.toLocaleString('en-US', currentWeekday)}\r\n                                             date={adaptedDate.toLocaleString('en-US', currentDate)}\r\n                                             sunrise={d.astro.sunrise}\r\n                                             sunset={d.astro.sunset}\r\n                                             icon={d.day.condition.icon}\r\n                                             condition_text={d.day.condition.text}\r\n                                             min_temp={d.day.mintemp_c}\r\n                                             max_temp={d.day.maxtemp_c}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Input.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { labelTitle?: string, error?: string }\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const {labelTitle, error, ...restProps} = props\r\n\r\n    return (\r\n        <label className={classes.label}>\r\n            {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n            <input {...restProps} type={props.type} className={`${classes.input} ${props.className}`}/>\r\n            {\r\n                error &&\r\n                <div className={classes.error}>\r\n                    <div className={classes.errorMessage}>{error}</div>\r\n                </div>\r\n            }\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default React.memo(Input)\r\n","import {API_KEY, instance} from \"./api\";\r\nimport {searchPlaceResponseType} from \"../types/common-types\";\r\n\r\n\r\nexport const searchAPI = {\r\n    place(place: string) {\r\n        return instance.get<searchPlaceResponseType[]>(`/search.json?key=${API_KEY}&q=${place}`)\r\n    }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {searchAPI} from \"../api/search-api\";\r\nimport {searchPlaceResponseType} from \"../types/common-types\";\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    data: [] as Array<searchPlaceResponseType>\r\n} as InitialStateType;\r\n\r\nexport const searchReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'SEARCH_DATA':\r\n            return {...state, data: action.data}\r\n        case 'CLEAN_DATA':\r\n            return {...state, data: []}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const searchDataAC = (data: Array<searchPlaceResponseType>) => ({type: 'SEARCH_DATA', data} as const)\r\nexport const cleanDataAC = () => ({type: 'CLEAN_DATA'} as const)\r\n\r\n\r\n// THUNK\r\nexport const searchTC = (place: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    searchAPI.place(place)\r\n        .then(res => {\r\n            dispatch(searchDataAC(res.data))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.response.data.error))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    data: Array<searchPlaceResponseType>\r\n}\r\n\r\nexport type ActionsType = SearchDataACType | CleanDataACType\r\n\r\nexport type SearchDataACType = ReturnType<typeof searchDataAC>\r\nexport type CleanDataACType = ReturnType<typeof cleanDataAC>","import React, {ChangeEvent, useCallback, useState, KeyboardEvent, useEffect} from \"react\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {cleanDataAC, searchTC} from \"../../reducers/search-reducer\";\r\nimport styles from './Search.module.scss';\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {searchPlaceResponseType} from \"../../types/common-types\";\r\nimport {getCurrentWeatherTC} from \"../../reducers/currentWeather-reducer\";\r\nimport {getForecastTC} from \"../../reducers/forecast-reducer\";\r\nimport useDebounce from \"../../hooks/useDebounce\";\r\n\r\nconst Search = () => {\r\n    const dispatch = useDispatch()\r\n    const searchData = useSelector<AppRootStateType, Array<searchPlaceResponseType>>(state => state.search.data)\r\n    const [searchVal, setSearchVal] = useState('')\r\n    const debouncedSearchTerm = useDebounce(searchVal, 200);\r\n\r\n    const onInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchVal(e.currentTarget.value)\r\n    }, [searchVal])\r\n\r\n    const onPlaceClick = useCallback((lat: number, lon: number) => {\r\n        dispatch(getCurrentWeatherTC(lat, lon))\r\n        dispatch(getForecastTC(3, lat, lon))\r\n        dispatch(cleanDataAC())\r\n        setSearchVal('')\r\n    }, [searchVal])\r\n\r\n    useEffect(() => {\r\n        debouncedSearchTerm && dispatch(searchTC(searchVal))\r\n    }, [debouncedSearchTerm])\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                <h2>Search</h2>\r\n                <Input value={searchVal} labelTitle='' onChange={onInputChange} placeholder='Search a place.....'/>\r\n                <div className={styles.options}>\r\n                    {searchData.map(d => <p className={styles.option}\r\n                                            key={d.id}\r\n                                            onClick={() => onPlaceClick(d.lat, d.lon)}>{d.name}</p>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import {useEffect, useState} from \"react\";\r\n\r\nexport default function useDebounce(value: string, delay: number) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Set debouncedValue to value (passed in) after the specified delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Return a cleanup function that will be called every time ...\r\n            // ... useEffect is re-called. useEffect will only be re-called ...\r\n            // ... if value changes (see the inputs array below).\r\n            // This is how we prevent debouncedValue from changing if value is ...\r\n            // ... changed within the delay period. Timeout gets cleared and restarted.\r\n            // To put it in context, if the user is typing within our app's ...\r\n            // ... search box, we don't want the debouncedValue to update until ...\r\n            // ... they've stopped typing for more than 500ms.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        // Only re-call effect if value changes\r\n        // You could also add the \"delay\" var to inputs array if you ...\r\n        // ... need to be able to change that dynamically.\r\n        [value]\r\n    );\r\n\r\n    return debouncedValue;\r\n}","import React from 'react';\r\nimport styles from './SocialLink.module.scss';\r\n\r\ntype SocialLinkType = {\r\n\tlink: string\r\n\ttitle: string\r\n}\r\n\r\nconst SocialLink = (props: SocialLinkType) => {\r\n\treturn (\r\n\t\t\t<div className={styles.socialLink}>\r\n\t\t\t\t<a className={styles.link} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.title}</a>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SocialLink;","import React from 'react';\r\nimport styles from './SocialLinks.module.scss';\r\nimport SocialLink from './SocialLink/SocialLink';\r\n\r\nconst SocialLinks = () => {\r\n\treturn (\r\n\t\t\t<section className={styles.socialLinks}>\r\n\t\t\t\t<SocialLink link={'https://www.linkedin.com/in/katesheleh/'} title=\"Linkedin\"/>\r\n\t\t\t\t<SocialLink link={'https://github.com/katesheleh'} title=\"Github\"/>\r\n\t\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default SocialLinks;","import React from 'react';\r\nimport styles from './Footer.module.scss';\r\nimport SocialLinks from './SocialLinks/SocialLinks';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className={styles.footer}>\r\n            <SocialLinks/>\r\n            <p className={styles.copyright}>© created by Katia Sheleh</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport Weather from \"./components/CurrentWeather/Weather\";\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Search from \"./components/Search/Search\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>- Weather -</h1>\n            <Search/>\n            <Weather/>\n            <Forecast/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {requestReducer} from \"./request-reducer\";\r\nimport {currentWeatherReducer} from \"./currentWeather-reducer\";\r\nimport {forecastReducer} from \"./forecast-reducer\";\r\nimport {searchReducer} from \"./search-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    currentWeather: currentWeatherReducer,\r\n    forecast: forecastReducer,\r\n    request: requestReducer,\r\n    search: searchReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./reducers/store\";\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ForecastDay_wrap__cwWz8\",\"img\":\"ForecastDay_img__3apfp\",\"date\":\"ForecastDay_date__1L0X0\",\"details\":\"ForecastDay_details__8WW_7\",\"icon\":\"ForecastDay_icon__2mHjV\",\"temp\":\"ForecastDay_temp__2HaDc\"};"],"sourceRoot":""}