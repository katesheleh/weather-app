{"version":3,"sources":["components/Forecast/ForecastDay/ForecastDay.module.scss","components/common/Input/Input.module.scss","components/Forecast/Forecast.module.scss","components/Search/Search.module.scss","components/Footer/Footer.module.scss","components/Footer/SocialLinks/SocialLink/SocialLink.module.scss","components/common/Preloader/Preloader.module.css","components/CurrentWeather/CurrentWeatherData/CurrentWeatherData.module.scss","components/common/Button/Button.module.scss","components/Footer/SocialLinks/SocialLinks.module.scss","assets/images/loader.svg","components/CurrentWeather/Location/Location.tsx","reducers/request-reducer.ts","api/api.ts","api/currentWeather-api.ts","reducers/currentWeather-reducer.ts","components/CurrentWeather/CurrentWeatherData/CurrentWeatherData.tsx","components/CurrentWeather/Weather.tsx","api/forecast-api.ts","reducers/forecast-reducer.ts","components/common/Button/Button.tsx","components/Forecast/ForecastDay/ForecastDay.tsx","components/Forecast/Forecast.tsx","components/common/Input/Input.tsx","api/search-api.ts","reducers/search-reducer.ts","components/Search/Search.tsx","hooks/useDebounce.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","components/common/Preloader/Preloader.tsx","App.tsx","serviceWorker.ts","reducers/store.ts","index.tsx"],"names":["module","exports","Location","props","className","styles","location","name","region","country","slice","createSlice","initialState","error","isFetching","reducers","errorAC","state","action","payload","isFetchingAC","requestReducer","reducer","actions","API_KEY","instance","axios","create","baseURL","currentWeatherApi","lat","lon","get","getUserCoordinatesTC","createAsyncThunk","undefined","thunkAPI","navigator","geolocation","getCurrentPosition","position","dispatch","userCoordinatesAC","coords","latitude","longitude","getCurrentWeatherTC","param","a","res","userLocationAC","data","currentWeather","current","response","condition","extraReducers","builder","addCase","fulfilled","currentWeatherReducer","CurrentWeatherData","colLeft","colLeftInner","src","condition_img","width","currentWeatherImg","desc","largeText","temp_c","bigText","condition_text","colRight","currentWeatherItem","icon","faCalendarAlt","last_updated_weekday","last_updated_date","faTemperatureHigh","faWater","humidity","faWind","wind_kph","wind_dir","faBacon","gust_kph","Weather","useDispatch","useSelector","useEffect","updateDate","Date","last_updated","toLocaleString","weekday","year","month","day","feelslike_c","text","forecastAPI","days","getForecastTC","forecastday","forecast","forecastReducer","React","memo","labelTitle","restProps","classes","btn","ForecastDay","wrap","weekDay","date","img","temp","min_temp","max_temp","details","faSun","sunrise","faMoon","sunset","Forecast","forecastInfo","useState","forecastDays","setForecastDays","currentWeekday","currentDate","btns","onClick","map","d","adaptedDate","key","astro","mintemp_c","maxtemp_c","label","type","input","errorMessage","searchAPI","place","searchTC","cleanDataAC","searchReducer","Search","searchData","search","searchVal","setSearchVal","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","onInputChange","useCallback","e","currentTarget","onPlaceClick","onChange","placeholder","options","option","id","SocialLink","socialLink","link","href","target","rel","title","SocialLinks","socialLinks","Footer","footer","copyright","wrapper","preloader","alt","App","requestIsFetching","request","Boolean","window","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3163bf8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ForecastDay_wrap__cwWz8\",\"img\":\"ForecastDay_img__3apfp\",\"date\":\"ForecastDay_date__1L0X0\",\"details\":\"ForecastDay_details__8WW_7\",\"icon\":\"ForecastDay_icon__2mHjV\",\"temp\":\"ForecastDay_temp__2HaDc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__1Ryba\",\"error\":\"Input_error__3tqam\",\"errorMessage\":\"Input_errorMessage__2eBzi\",\"showPassword\":\"Input_showPassword__sw7W0\",\"input\":\"Input_input__3Ajls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"Forecast_days__3c9pS\",\"day\":\"Forecast_day__2Zige\",\"btns\":\"Forecast_btns__Yr0K7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"Search_option__2FNbj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__NKLTu\",\"copyright\":\"Footer_copyright__2Y56w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__2CHKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__36syV\",\"img\":\"Preloader_img__2MpzG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentWeather\":\"CurrentWeatherData_currentWeather__1IvEW\",\"colLeft\":\"CurrentWeatherData_colLeft__KIElu\",\"colLeftInner\":\"CurrentWeatherData_colLeftInner__3cjZk\",\"colRight\":\"CurrentWeatherData_colRight__VTPkp\",\"currentWeatherImg\":\"CurrentWeatherData_currentWeatherImg__346TM\",\"largeText\":\"CurrentWeatherData_largeText__3wvtN\",\"bigText\":\"CurrentWeatherData_bigText__1yR8P\",\"currentWeatherItem\":\"CurrentWeatherData_currentWeatherItem__42IZd\",\"icon\":\"CurrentWeatherData_icon__2qdFQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__AyrSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__1_ngm\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","import React from \"react\"\r\nimport styles from './Location.module.scss'\r\n\r\nconst Location = (props: LocationPropsType) => {\r\n\r\n    return (\r\n        <div className={styles.location}>\r\n            <h2>{props.name}, {props.region}, {props.country}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n\r\n\r\ntype LocationPropsType = {\r\n    name: string\r\n    region: string\r\n    country: string\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState = {\r\n    error: '',\r\n    isFetching: false,\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'request',\r\n    initialState: initialState,\r\n    reducers: {\r\n        errorAC(state, action: PayloadAction<{ error: string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        isFetchingAC(state, action: PayloadAction<{ isFetching: boolean }>) {\r\n            state.isFetching = action.payload.isFetching\r\n        }\r\n    }\r\n})\r\n\r\nexport const requestReducer = slice.reducer\r\n\r\nexport const {errorAC, isFetchingAC} = slice.actions\r\n","import axios from \"axios\";\r\n\r\nexport const API_KEY = 'ad86b534a1a14d4891f171701201710'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://api.weatherapi.com/v1',\r\n})","import {API_KEY, instance} from \"./api\";\r\nimport {CurrentWeatherResponseType, LocationResponseType} from \"../types/common-types\";\r\n\r\nexport const currentWeatherApi = {\r\n    currentWeather(lat: number, lon: number) {\r\n        return instance.get<CurrectWeatherType>(`/current.json?key=${API_KEY}&q=${lat},${lon}`)\r\n    }\r\n}\r\n\r\nexport type CurrectWeatherType = {\r\n    location: LocationResponseType,\r\n    current: CurrentWeatherResponseType\r\n}","import {errorAC} from \"./request-reducer\";\r\nimport {ConditionResponseType, CurrentWeatherResponseType, LocationResponseType} from \"../types/common-types\";\r\nimport {currentWeatherApi} from \"../api/currentWeather-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// THUNK\r\nexport const getUserCoordinatesTC = createAsyncThunk(\r\n    'currentWeather/getUserCoordinatesTC',\r\n    (undefined, thunkAPI) => {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            thunkAPI.dispatch(userCoordinatesAC({lat: position.coords.latitude, lon: position.coords.longitude}))\r\n        });\r\n    }\r\n)\r\n\r\nexport const getCurrentWeatherTC = createAsyncThunk(\r\n    'currentWeather/getCurrentWeather',\r\n    async (param: { lat: number, lon: number }, thunkAPI) => {\r\n        try {\r\n            const res = await currentWeatherApi.currentWeather(param.lat, param.lon)\r\n            thunkAPI.dispatch(userLocationAC({location: res.data.location}))\r\n            return {currentWeather: res.data.current}\r\n        } catch (error) {\r\n            thunkAPI.dispatch(errorAC({error: error.response.data.error}))\r\n            return false\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'currentWeather',\r\n    initialState: {\r\n        lat: 0,\r\n        lon: 0,\r\n        location: {} as LocationResponseType,\r\n        currentWeather: {\r\n            condition: {} as ConditionResponseType\r\n        } as CurrentWeatherResponseType\r\n    } as InitialStateType,\r\n    reducers: {\r\n        userCoordinatesAC(state, action: PayloadAction<{ lat: number, lon: number }>) {\r\n            state.lat = action.payload.lat\r\n            state.lon = action.payload.lon\r\n        },\r\n        userLocationAC(state, action: PayloadAction<{ location: LocationResponseType }>) {\r\n            state.location = action.payload.location\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(getCurrentWeatherTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.currentWeather = action.payload.currentWeather\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n// reducer\r\nexport const currentWeatherReducer = slice.reducer\r\n\r\n// Action creators\r\nexport const {userCoordinatesAC, userLocationAC} = slice.actions\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    lat: number\r\n    lon: number\r\n    location: LocationResponseType\r\n    currentWeather: CurrentWeatherResponseType\r\n}","import React from \"react\"\r\nimport styles from './CurrentWeatherData.module.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBacon, faCalendarAlt, faTemperatureHigh, faWater, faWind} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CurrentWeatherData = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={styles.currentWeather}>\r\n            <div className={styles.colLeft}>\r\n                <div className={styles.colLeftInner}>\r\n                    <img src={props.condition_img} width='150' className={styles.currentWeatherImg}/>\r\n                    <div className={styles.desc}>\r\n                        <p className={styles.largeText}>{props.temp_c}&#176;C</p>\r\n                        <p className={styles.bigText}>{props.condition_text}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={styles.colRight}>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faCalendarAlt} className={styles.icon}/> <span>Today: </span>{props.last_updated_weekday} {props.last_updated_date}</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faTemperatureHigh} className={styles.icon}/><span>Feels Like: </span>{props.temp_c}&#176;C</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faWater} className={styles.icon}/><span>Humidity:</span> {props.humidity} %</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faWind} className={styles.icon}/><span>Wind:</span> {props.wind_kph} km/h ({props.wind_dir})</p>\r\n                <p className={styles.currentWeatherItem}> <FontAwesomeIcon icon={faBacon} className={styles.icon}/><span>Gust: </span>{props.gust_kph}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentWeatherData\r\n\r\n\r\ntype PropsType = {\r\n    last_updated_weekday: string\r\n    last_updated_date: string\r\n    temp_c: number\r\n    feelslike_c: number\r\n    wind_kph: number\r\n    wind_dir: string\r\n    gust_kph: number\r\n    humidity: number\r\n    condition_text: string\r\n    condition_img: string\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport Location from \"./Location/Location\";\r\nimport {getCurrentWeatherTC} from \"../../reducers/currentWeather-reducer\";\r\nimport CurrentWeatherData from \"./CurrentWeatherData/CurrentWeatherData\";\r\nimport {CurrentWeatherResponseType, LocationResponseType} from \"../../types/common-types\";\r\n\r\n\r\nconst Weather = () => {\r\n    const dispatch = useDispatch()\r\n    const lat = useSelector<AppRootStateType, number>(state => state.currentWeather.lat)\r\n    const lon = useSelector<AppRootStateType, number>(state => state.currentWeather.lon)\r\n    const location = useSelector<AppRootStateType, LocationResponseType>(state => state.currentWeather.location)\r\n    const currentWeather = useSelector<AppRootStateType, CurrentWeatherResponseType>(state => state.currentWeather.currentWeather)\r\n\r\n    useEffect(() => {\r\n        if (lat !== 0 && lon !== 0) {\r\n            dispatch(getCurrentWeatherTC({lat, lon}))\r\n        }\r\n    }, [lat, lon])\r\n\r\n    const updateDate = new Date(currentWeather.last_updated)\r\n    let currentWeekday = {weekday: 'long'}\r\n    let currentDate = {year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                <Location name={location.name} region={location.region} country={location.country}/>\r\n                <CurrentWeatherData last_updated_weekday={updateDate.toLocaleString('en-US', currentWeekday)}\r\n                                    last_updated_date={updateDate.toLocaleString('en-US', currentDate)}\r\n                                    temp_c={currentWeather.temp_c}\r\n                                    feelslike_c={currentWeather.feelslike_c}\r\n                                    wind_kph={currentWeather.wind_kph}\r\n                                    wind_dir={currentWeather.wind_dir}\r\n                                    gust_kph={currentWeather.gust_kph}\r\n                                    humidity={currentWeather.humidity}\r\n                                    condition_text={currentWeather.condition.text}\r\n                                    condition_img={currentWeather.condition.icon}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import {API_KEY, instance} from \"./api\";\r\nimport {\r\n    AstroResponseType,\r\n    CurrentWeatherResponseType,\r\n    DayResponseType, HourResponseType,\r\n    LocationResponseType\r\n} from \"../types/common-types\";\r\n\r\nexport const forecastAPI = {\r\n    dailyWeather(days: number, lat: number, lon: number) {\r\n        return instance.get<ForecastType>(`/forecast.json?key=${API_KEY}&q=${lat},${lon}&days=${days}`)\r\n    }\r\n}\r\n\r\nexport type ForecastType = {\r\n    location: LocationResponseType,\r\n    current: CurrentWeatherResponseType\r\n    forecast: ForecastDayInfoType\r\n}\r\n\r\nexport type ForecastDayInfoType = {\r\n    forecastday: Array<ForecastdayResponseType>\r\n}\r\n\r\nexport type ForecastdayResponseType = {\r\n    date: string\r\n    day: DayResponseType\r\n    astro: AstroResponseType\r\n    hour: Array<HourResponseType>\r\n}\r\n","import {forecastAPI, ForecastdayResponseType} from \"../api/forecast-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {errorAC} from \"./request-reducer\";\r\n\r\n\r\n// THUNK\r\nexport const getForecastTC = createAsyncThunk(\r\n    'forecast/getForecast',\r\n    async (param: { days: number, lat: number, lon: number }, thunkAPI) => {\r\n        try {\r\n            const res = await forecastAPI.dailyWeather(param.days, param.lat, param.lon)\r\n            return {forecastday: res.data.forecast.forecastday}\r\n        } catch (error) {\r\n            thunkAPI.dispatch(errorAC({error: error.response.data.error}))\r\n            return false\r\n        }\r\n\r\n    }\r\n)\r\n\r\nconst slice = createSlice({\r\n    name: 'forecast',\r\n    initialState: {\r\n        forecastday: [] as Array<ForecastdayResponseType>\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(getForecastTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.forecastday = action.payload.forecastday\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n//Reducer\r\nexport const forecastReducer = slice.reducer\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    forecastday: Array<ForecastdayResponseType>\r\n}\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { labelTitle?: string }\r\n\r\nconst Button = (props: InputPropsType) => {\r\n    const {labelTitle, ...restProps} = props\r\n    return (\r\n        <button className={classes.btn} {...restProps}> {props.labelTitle}</button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","import React from \"react\";\r\nimport styles from './ForecastDay.module.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faMoon, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ForecastDay = (props: PropsType) => {\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <h3>{props.weekDay}</h3>\r\n            <p className={styles.date}>{props.date}</p>\r\n            <img src={props.icon} className={styles.img}/>\r\n            <p>{props.condition_text}</p>\r\n            <p className={styles.temp}>{props.min_temp} - {props.max_temp}&#176;C</p>\r\n            <div className={styles.details}>\r\n                <p><FontAwesomeIcon icon={faSun} className={styles.icon}/> {props.sunrise}</p>\r\n                <p><FontAwesomeIcon icon={faMoon} className={styles.icon}/> {props.sunset}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForecastDay;\r\n\r\n\r\ntype PropsType = {\r\n    weekDay: string\r\n    date: string\r\n    sunrise: string\r\n    sunset: string\r\n    icon: string\r\n    condition_text: string\r\n    min_temp: number\r\n    max_temp: number\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {getForecastTC} from \"../../reducers/forecast-reducer\"\r\nimport {AppRootStateType} from \"../../reducers/store\"\r\nimport styles from './Forecast.module.scss'\r\nimport Button from \"../common/Button/Button\"\r\nimport ForecastDay from \"./ForecastDay/ForecastDay\"\r\nimport {ForecastdayResponseType} from \"../../api/forecast-api\"\r\n\r\n\r\nconst Forecast = () => {\r\n    const dispatch = useDispatch()\r\n    const lat = useSelector<AppRootStateType, number>(state => state.currentWeather.lat)\r\n    const lon = useSelector<AppRootStateType, number>(state => state.currentWeather.lon)\r\n    const forecastInfo = useSelector<AppRootStateType, ForecastdayResponseType[]>(state => state.forecast.forecastday)\r\n    const [forecastDays, setForecastDays] = useState(3)\r\n\r\n    useEffect(() => {\r\n        if (lat !== 0 && lon !== 0) {\r\n            dispatch(getForecastTC({days: forecastDays, lat: lat, lon: lon}))\r\n        }\r\n    }, [lat, lon, forecastDays])\r\n\r\n\r\n    let currentWeekday = {weekday: 'long'}\r\n    let currentDate = {year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                <h2>Forecast</h2>\r\n                <div className={styles.btns}>\r\n                    <Button labelTitle='1 day' onClick={() => setForecastDays(1)}/>\r\n                    <Button labelTitle='2 days' onClick={() => setForecastDays(2)}/>\r\n                    <Button labelTitle='3 days' onClick={() => setForecastDays(3)}/>\r\n                </div>\r\n                <div className={styles.days}>\r\n                    {forecastInfo.map((d) => {\r\n                        const adaptedDate = new Date(d.date)\r\n                        return (\r\n                            <div className={styles.day} key={d.date}>\r\n                                <ForecastDay weekDay={adaptedDate.toLocaleString('en-US', currentWeekday)}\r\n                                             date={adaptedDate.toLocaleString('en-US', currentDate)}\r\n                                             sunrise={d.astro.sunrise}\r\n                                             sunset={d.astro.sunset}\r\n                                             icon={d.day.condition.icon}\r\n                                             condition_text={d.day.condition.text}\r\n                                             min_temp={d.day.mintemp_c}\r\n                                             max_temp={d.day.maxtemp_c}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Input.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { labelTitle?: string, error?: string }\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const {labelTitle, error, ...restProps} = props\r\n\r\n    return (\r\n        <label className={classes.label}>\r\n            {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n            <input {...restProps} type={props.type} className={`${classes.input} ${props.className}`}/>\r\n            {\r\n                error &&\r\n                <div className={classes.error}>\r\n                    <div className={classes.errorMessage}>{error}</div>\r\n                </div>\r\n            }\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default React.memo(Input)\r\n","import {API_KEY, instance} from \"./api\";\r\nimport {searchPlaceResponseType} from \"../types/common-types\";\r\n\r\n\r\nexport const searchAPI = {\r\n    place(place: string) {\r\n        return instance.get<searchPlaceResponseType[]>(`/search.json?key=${API_KEY}&q=${place}`)\r\n    }\r\n}\r\n","import {searchAPI} from \"../api/search-api\";\r\nimport {searchPlaceResponseType} from \"../types/common-types\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {errorAC} from \"./request-reducer\";\r\n\r\n\r\n// THUNK\r\nexport const searchTC = createAsyncThunk(\r\n    'search/searchTC',\r\n    async (place: string, thunkAPI) => {\r\n        try {\r\n            const res = await searchAPI.place(place)\r\n            return {data: res.data}\r\n        } catch (error) {\r\n            thunkAPI.dispatch(errorAC({error: error.response.data.error}))\r\n            return false\r\n        }\r\n\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'search',\r\n    initialState: {\r\n        data: [] as Array<searchPlaceResponseType>\r\n    } as InitialStateType,\r\n    reducers: {\r\n        cleanDataAC(state) {\r\n            state.data = []\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(searchTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.data = action.payload.data\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const searchReducer = slice.reducer\r\n\r\n// Action creators\r\nexport const {cleanDataAC} = slice.actions\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    data: Array<searchPlaceResponseType>\r\n}","import React, {ChangeEvent, useCallback, useState, useEffect} from \"react\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {cleanDataAC, searchTC} from \"../../reducers/search-reducer\";\r\nimport styles from './Search.module.scss';\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {searchPlaceResponseType} from \"../../types/common-types\";\r\nimport {getCurrentWeatherTC} from \"../../reducers/currentWeather-reducer\";\r\nimport {getForecastTC} from \"../../reducers/forecast-reducer\";\r\nimport useDebounce from \"../../hooks/useDebounce\";\r\n\r\nconst Search = () => {\r\n    const dispatch = useDispatch()\r\n    const searchData = useSelector<AppRootStateType, Array<searchPlaceResponseType>>(state => state.search.data)\r\n    const [searchVal, setSearchVal] = useState('')\r\n    const debouncedSearchTerm = useDebounce(searchVal, 200);\r\n\r\n    const onInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchVal(e.currentTarget.value)\r\n    }, [searchVal])\r\n\r\n    const onPlaceClick = useCallback((lat: number, lon: number) => {\r\n        dispatch(getCurrentWeatherTC({lat, lon}))\r\n        dispatch(getForecastTC({days: 3, lat: lat, lon: lon}))\r\n        dispatch(cleanDataAC())\r\n        setSearchVal('')\r\n    }, [searchVal])\r\n\r\n    useEffect(() => {\r\n        debouncedSearchTerm && dispatch(searchTC(searchVal))\r\n    }, [debouncedSearchTerm])\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='sectionWrap'>\r\n                <h2>Search</h2>\r\n                <Input value={searchVal} labelTitle='' onChange={onInputChange} placeholder='Search a place.....'/>\r\n                <div className={styles.options}>\r\n                    {searchData.map(d => <p className={styles.option}\r\n                                            key={d.id}\r\n                                            onClick={() => onPlaceClick(d.lat, d.lon)}>{d.name}</p>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import {useEffect, useState} from \"react\";\r\n\r\nexport default function useDebounce(value: string, delay: number) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Set debouncedValue to value (passed in) after the specified delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Return a cleanup function that will be called every time ...\r\n            // ... useEffect is re-called. useEffect will only be re-called ...\r\n            // ... if value changes (see the inputs array below).\r\n            // This is how we prevent debouncedValue from changing if value is ...\r\n            // ... changed within the delay period. Timeout gets cleared and restarted.\r\n            // To put it in context, if the user is typing within our app's ...\r\n            // ... search box, we don't want the debouncedValue to update until ...\r\n            // ... they've stopped typing for more than 500ms.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        // Only re-call effect if value changes\r\n        // You could also add the \"delay\" var to inputs array if you ...\r\n        // ... need to be able to change that dynamically.\r\n        [value]\r\n    );\r\n\r\n    return debouncedValue;\r\n}","import React from 'react';\r\nimport styles from './SocialLink.module.scss';\r\n\r\ntype SocialLinkType = {\r\n\tlink: string\r\n\ttitle: string\r\n}\r\n\r\nconst SocialLink = (props: SocialLinkType) => {\r\n\treturn (\r\n\t\t\t<div className={styles.socialLink}>\r\n\t\t\t\t<a className={styles.link} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.title}</a>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SocialLink;","import React from 'react';\r\nimport styles from './SocialLinks.module.scss';\r\nimport SocialLink from './SocialLink/SocialLink';\r\n\r\nconst SocialLinks = () => {\r\n\treturn (\r\n\t\t\t<section className={styles.socialLinks}>\r\n\t\t\t\t<SocialLink link={'https://www.linkedin.com/in/katesheleh/'} title=\"Linkedin\"/>\r\n\t\t\t\t<SocialLink link={'https://github.com/katesheleh'} title=\"Github\"/>\r\n\t\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default SocialLinks;","import React from 'react';\r\nimport styles from './Footer.module.scss';\r\nimport SocialLinks from './SocialLinks/SocialLinks';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className={styles.footer}>\r\n            <SocialLinks/>\r\n            <p className={styles.copyright}>© created by Katia Sheleh</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = () => {\r\n   return (\r\n      <div className={styles.wrapper}>\r\n         <img src={preloader} className={styles.img} alt='loader'/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Preloader)\r\n","import React, {useEffect} from 'react';\nimport './App.scss';\nimport Weather from \"./components/CurrentWeather/Weather\";\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Search from \"./components/Search/Search\";\nimport Footer from \"./components/Footer/Footer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./reducers/store\";\nimport {getUserCoordinatesTC} from \"./reducers/currentWeather-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\n    const lat = useSelector<AppRootStateType, number>(state => state.currentWeather.lat)\n    const lon = useSelector<AppRootStateType, number>(state => state.currentWeather.lon)\n\n    useEffect(() => {\n        dispatch(getUserCoordinatesTC())\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {requestIsFetching && <Preloader/>}\n            {(!lat && !lon)\n                ? <h1>Please allow your browser to share your location</h1>\n                : <>\n                    <h1>- Weather -</h1>\n                    <Search/>\n                    <Weather/>\n                    <Forecast/>\n                    <Footer/>\n                </>}\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {requestReducer} from \"./request-reducer\";\r\nimport {currentWeatherReducer} from \"./currentWeather-reducer\";\r\nimport {forecastReducer} from \"./forecast-reducer\";\r\nimport {searchReducer} from \"./search-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    currentWeather: currentWeatherReducer,\r\n    forecast: forecastReducer,\r\n    request: requestReducer,\r\n    search: searchReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./reducers/store\";\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}